#!/usr/bin/env bash

#
# Steps:
#
#  1. Download corresponding html file for some README.md:
#       curl -s $1
#
#  2. Discard rows where no substring 'user-content-' (github's markup):
#       awk '/user-content-/ { ...
#
#  3.1 Get last number in each row like ' ... </span></a>sitemap.js</h1'.
#      It's a level of the current header:
#       substr($0, length($0), 1)
#
#  3.2 Get level from 3.1 and insert corresponding number of spaces before '*':
#       sprintf("%*s", substr($0, length($0), 1)*3, " ")
#
#  4. Find head's text and insert it inside "* [ ... ]":
#       substr($0, match($0, /a>.*<\/h/)+2, RLENGTH-5)
#
#  5. Find anchor and insert it inside "(...)":
#       substr($0, match($0, "href=\"[^\"]+?\" ")+6, RLENGTH-8)
#

ghmd_toc_version="1.0.0+offline"

#
# TOC generator
#
gh_toc(){
	local gh_src=$1
	local gh_src_copy=$1
	local gh_ttl_docs=$2
	local need_replace=$3

	if [ "$gh_src" = "" ]; then
		echo "Please, enter URL or local path for a README.md"
		exit 1
	fi

	# Show "TOC" string only if working with one document
	if [ "$gh_ttl_docs" = "1" ]; then
		echo "Table of Contents"
		echo "================="
		echo ""
		gh_src_copy=""
	fi

	case "$gh_src" in
		(https*|http*)
			echo >&2 "remote document not supported"
			return 1
		;;
	esac

		local toc="$(ghmd_toc_grab < "$gh_src")"
		echo "$toc"

#		if [ "$need_replace" = "yes" ]; then
#			local ts="<\!--ts-->"
#			local te="<\!--te-->"
#			local dt=`date +'%F_%H%M%S'`
#			local ext=".orig.${dt}"
#			local toc_path="${gh_src}.toc.${dt}"
#			local toc_footer="<!-- Added by: `whoami`, at: `date` -->"
#			# http://fahdshariff.blogspot.ru/2012/12/sed-mutli-line-replacement-between-two.html
#			# clear old TOC
#			sed -i${ext} "/${ts}/,/${te}/{//!d;}" "$gh_src"
#			# create toc file
#			echo "${toc}" > "${toc_path}"
#			echo -e "\n${toc_footer}\n" >> "$toc_path"
#			# insert toc file
#			if [ "$(uname)" = "Darwin" ]; then
#				sed -i "" "/${ts}/r ${toc_path}" "$gh_src"
#			else
#				sed -i "/${ts}/r ${toc_path}" "$gh_src"
#			fi
#			echo
#			echo "!! TOC was added into: '$gh_src'"
#			echo "!! Origin version of the file: '${gh_src}${ext}'"
#			echo "!! TOC added into a separate file: '${toc_path}'"
#			echo
#		fi
}

gh_title_md2anchor() {
	printf %s "$1" |
	sed \
		-e 's/[[:space:]]\+/ /g' \
		-e 's, $,,g' \
		-e 's,^ ,,g' \
	|
	tr 'A-Z ' 'a-z-' |
	tr -d '\0- !-,./:-@[-]^`{-}~\177'  # tr -dc 'a-z0-9_-'
}

ghmd_toc_grab() {
	grep '^#\+[[:space:]]\+[^[:space:]]\+.*$' |
	while read -r prefix title; do
		local indent="$(printf %$(( ${#prefix} * 2 ))s '')"
		printf '%s* [%s](%s#%s)'\\n "$indent" "$title" "README.md" "$(gh_title_md2anchor "$title")"
	done
}

#
# Options hendlers
#
gh_toc_app() {
	local app_name=$(basename $0)
	local need_replace="no"

	if [ "$1" = '--help' ] || [ $# -eq 0 ] ; then
		echo "GitHub TOC generator ($app_name): $gh_toc_version"
		echo ""
		echo "Usage:"
		echo "  $app_name [--insert] src [src]  Create TOC for a README file (url or local path)"
		echo "  $app_name -                     Create TOC for markdown from STDIN"
		echo "  $app_name --help                Show help"
		echo "  $app_name --version             Show version"
		return
	fi

	if [ "$1" = '--version' ]; then
		echo "$gh_toc_version"
		echo
		echo "os:     `lsb_release -d | cut -f 2`"
		echo "kernel: `cat /proc/version`"
		echo "shell:  `$SHELL --version`"
		echo
		for tool in grep awk sed; do
			printf "%-5s: " $tool
			echo `$tool --version | head -n 1`
		done
		return
	fi

#	if [ "$1" = "-" ]; then
#		if [ -z "$TMPDIR" ]; then
#			TMPDIR="/tmp"
#		elif [ -n "$TMPDIR" -a ! -d "$TMPDIR" ]; then
#			mkdir -p "$TMPDIR"
#		fi
#		local gh_tmp_md
#		gh_tmp_md=$(mktemp $TMPDIR/tmp.XXXXXX)
#		cat >"$gh_tmp_md"
#		gh_toc_md2html "$gh_tmp_md" | gh_toc_grab ""
#		rm -f -- "$gh_tmp_md"
#		return
#	fi

	if [ "$1" = '--insert' ]; then
		need_replace="yes"
		shift
	fi

	for md in "$@"; do
		echo ""
		gh_toc "$md" "$#" "$need_replace"
	done

#	echo ""
#	echo "Created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)"
}

#
# Entry point
#
gh_toc_app "$@"
